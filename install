#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import argparse
import platform
import shutil
import subprocess

################################################################################
# Auxiliary functions
################################################################################

OKGREEN = '\033[92m'
FAIL = '\033[91m'
ENDC = '\033[0m'


def echo(message, ok=True, no_color=False, box=False):
    padded_lines = [(' ' + line + ' ') for line in message.splitlines()]
    if box:
        bar_len = max(len(line) for line in padded_lines)
        lines = [(OKGREEN if ok else FAIL)]
        lines += ['┌' + ('─' * bar_len) + '┐\n']
        lines += [('│' + line.ljust(bar_len) + '│\n') for line in padded_lines]
        lines += ['└' + ('─' * bar_len) + '┘']
        lines += [ENDC]
    else:
        lines = [(OKGREEN if ok else FAIL)]
        lines += ['\n'.join(padded_lines)]
        lines += [ENDC]
    lines = lines if not no_color else lines[1:-1]
    print(''.join(lines))


def append_path(path, acc):
    if path:
        return path + os.path.sep + acc
    return acc


def run(cmd, shell=False, check=False):
    code = subprocess.call(cmd, shell=shell, env=env)
    if not check and code != 0:
        echo('⚠️  Aborted: {} failed'.format(' '.join(cmd) if isinstance(cmd, list) else cmd), ok=False)
        sys.exit(code)
    return code


DARWIN = 1
DEBIAN = 2


def os_type():
    os = platform.system()
    if os == 'Darwin':
        return DARWIN
    elif os == 'Linux' and 'debian' in platform.platform():
        return DEBIAN
    else:
        echo('⚠️  OS {} is not supported!'.format(os), ok=False)
        sys.exit(2)


################################################################################
# Data
################################################################################


tux_ascii = '''
                 .88888888:.
                88888888.88888.
              .8888888888888888.
              888888888888888888
              88' _`88'_  `88888
              88 88 88 88  88888
              88_88_::_88_:88888
              88:::,::,:::::8888
              88`:::::::::'`8888
             .88  `::::'    8:88.
            8888            `8:888.
          .8888'             `888888.
         .8888:..  .::.  ...:'8888888:.
        .8888.'     :'     `'::`88:88888
       .8888        '         `.888:8888.
      888:8         .           888:88888
    .888:88        .:           888:88888:
    8888888.       ::           88:888888
    `.::.888.      ::          .88888888
   .::::::.888.    ::         :::`8888'.:.
  ::::::::::.888   '         .::::::::::::
  ::::::::::::.8    '      .:8::::::::::::.
 .::::::::::::::.        .:888:::::::::::::
 :::::::::::::::88:.__..:88888:::::::::::'
  `'.:::::::::::88888888888.88:::::::::'
        `':::_:' -- '' -'-' `':_::::'`
'''

apple_ascii = '''
                        .8
                      .888
                    .8888'
                   .8888'
                   888'
                   8'
      .88888888888. .88888888888.
   .8888888888888888888888888888888.
 .8888888888888888888888888888888888.
.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
`%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
 `00000000000000000000000000000000000'
  `000000000000000000000000000000000'
   `0000000000000000000000000000000'
     `###########################'
       `#######################'
         `#########''########'
           `""""""'  `"""""'
'''

toplevel = argparse.ArgumentParser()
toplevel.add_argument('--force', action='store_true', help='force install')

subcommands = toplevel.add_subparsers(dest='invoked_command')

cmd_all = subcommands.add_parser('all', help='install all (default)')
cmd_config = subcommands.add_parser('config', help='install config (as symlink)')
cmd_package = subcommands.add_parser('package', help='install packages')
cmd_ocaml = subcommands.add_parser('ocaml', help='install OCaml')
cmd_cargo = subcommands.add_parser('cargo', help='install cargo packages')
cmd_font = subcommands.add_parser('font', help='install fonts')
cmd_emacs = subcommands.add_parser('emacs', help='install emacs settings')

args = toplevel.parse_args()
uid = os.geteuid()  # 0 if root
sudo = uid != 0
here = os.path.abspath(os.path.dirname(__file__))
env = dict(os.environ)
errors = []


class Installer:
    def __init__(self, manager, packages, sudo=False, yes=False):
        if not shutil.which(manager):
            echo('⚠️  No such executable: {}'.format(manager), ok=False)
            sys.exit(2)

        self.cmd = ['sudo'] if sudo else []
        self.cmd += [manager, 'install']
        self.cmd += ['--yes'] if yes else []
        self.cmd += packages

    def install(self):
        run(self.cmd)


apt_packages = ['m4', 'silversearcher-ag', 'tmux', 'tree', 'htop', 'openssh-server',
                'graphviz', 'rsync', 'build-essential', 'tar', 'bzip2', 'gzip', 'zip',
                'autoconf', 'make', 'etckeeper', 'moreutils', 'libmysqlclient-dev',
                'bubblewrap', 'curl']
brew_packages = ['m4', 'tmux', 'bzip2', 'gzip', 'the_silver_searcher', 'htop', 'tree',
                 'git', 'gpatch']
opam_packages = ['merlin', 'tuareg', 'ocamlformat', 'ocp-indent', 'dune', 'base', 'core', 'utop']
cargo_packages = ['dutree', 'loc', 'bat', 'exa', 'eva', 'hyperfine']


################################################################################
# Steps
################################################################################


def base():
    """
    Base configuration. This just install brew for macOS
    """
    os.makedirs(os.path.expanduser('~/.config'), exist_ok=True)
    if os_type() == DARWIN:
        echo('🍎  Setup for macOS ...')
        echo(apple_ascii, no_color=True)
        echo('')
        if shutil.which('brew'):
            echo('Found brew in path ...')
            return

        # get brew first
        run('curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | sh', shell=True)
        env['PATH'] = append_path(env.get('PATH'), '/opt/homebrew/bin')
        run('brew update', shell=True)
        run('brew install gpatch git', shell=True)
    elif os_type() == DEBIAN:
        echo('🐧  Setup for Linux ...')
        echo(tux_ascii, no_color=True)
        echo('')
        run('{}apt update --yes'.format('sudo ' if sudo else ''), shell=True)


def install_config():
    """
    Link .*rc files,
    global keyboard speed setting in case of Linux,
    setup fzf,
    """
    def link(src, dst):
        src = os.path.join(here, src)
        dst = os.path.expanduser(dst)
        if os.path.exists(dst):
            echo('Already exist: {} -> {}'.format(src, dst))
            return
        os.symlink(src, dst)
        echo('✔ Create symbolic link: {} -> {}'.format(src, dst))

    link_info = {
        'nvim': '~/.config/nvim',
        'tmux/conf': '~/.tmux.conf',
        'git/config': '~/.gitconfig',
        'zsh': '~/.zsh',
        'zsh/rc.zsh': '~/.zshrc',
    }
    for src, dst in link_info.items():
        link(src, dst)


def install_package():
    """
    Install proper packages
    """
    if os_type() == DARWIN:
        Installer('brew', brew_packages).install()
    elif os_type() == DEBIAN:
        Installer('apt', apt_packages, sudo=sudo, yes=True).install()


def install_ocaml():
    """
    Install ocaml & packages
    """



def install_cargo():
    """
    Install cargo & packages
    """


def install_font():
    """
    Install fonts: D2Coding, powerline
    """


def install_emacs():
    """
    Install emacs & dotemacs
    - Linux: build from source --with-native-compilation
    - Darwin: brew tap d12prosted/emacs-plus && brew install emacs-plus@28 --with-native-comp
    """


def check_target(target):
    return args.invoked_command in {None, 'all', target}


def install(target):
    if not check_target(target):
        return

    try:
        echo('🎯  Install {} ...'.format(target))
        eval('install_{}'.format(target))()
    except Exception as e:
        import traceback
        _, msg, tb = sys.exc_info()
        locate = traceback.extract_tb(tb)[-1]
        desc = "at {}: {} ({})".format(locate.lineno, locate.line, msg)
        errors.append(desc)


################################################################################
# Actual process
################################################################################

base()
install('config')
install('package')
install('ocaml')
install('cargo')
install('font')
install('emacs')

if errors:
    echo("⚠  Got % 2d errors during installations!\nPlease check the following messages." % len(errors), ok=False, box=True)
    for err in errors:
        echo(err, ok=False)
else:
    echo("✔ Ready to go!", box=True)
