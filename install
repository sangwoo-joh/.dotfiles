#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import argparse
import platform
import shutil
import subprocess
import functools
import tempfile
import stat
import http.client
import multiprocessing

from os.path import abspath, dirname, expanduser, join, exists

################################################################################
# Auxiliary functions
################################################################################

OKGREEN = '\033[92m'
FAIL = '\033[91m'
ENDC = '\033[0m'


def echo(message, ok=True, no_color=False, box=False):
    padded_lines = [(' ' + line + ' ') for line in message.splitlines()]
    if box:
        bar_len = max(len(line) for line in padded_lines)
        lines = [(OKGREEN if ok else FAIL)]
        lines += ['┌' + ('─' * bar_len) + '┐\n']
        lines += [('│' + line.ljust(bar_len) + '│\n') for line in padded_lines]
        lines += ['└' + ('─' * bar_len) + '┘']
        lines += [ENDC]
    else:
        lines = [(OKGREEN if ok else FAIL)]
        lines += ['\n'.join(padded_lines)]
        lines += [ENDC]
    lines = lines if not no_color else lines[1:-1]
    try:
        print(''.join(lines))
    except UnicodeEncodeError:
        print(FAIL + "Codec error! You MUST set the following environments: LC_ALL=C.UTF-8" + ENDC)
        sys.exit(2)


def append_path(path, acc):
    if path:
        return path + os.pathsep + acc
    return acc


def run(cmd, shell=True, check=False):
    code = subprocess.call(cmd, shell=shell, env=env)
    if not check and code != 0:
        echo('⚠️  Aborted: {} failed'.format(' '.join(cmd) if isinstance(cmd, list) else cmd), ok=False)
        sys.exit(code)
    return code


def curl_install(link):
    url = link.split('://')[1]
    try:
        url, uri = url.split('/', 1)
    except ValueError:
        uri = ''
    conn = http.client.HTTPSConnection(url)
    conn.request('GET', '/' + uri)
    res = conn.getresponse()
    if res.status != 200:
        raise ConnectionError("HTTP Connection Error: {}, {}".format(res.status, res.reason))
    content = res.read().decode('utf-8')
    tmp = tempfile.NamedTemporaryFile(delete=True)
    with open(tmp.name, 'w') as fp:
        fp.write(content)
        fp.flush()
    tmp.file.close()
    conn.close()
    os.chmod(tmp.name, os.stat(tmp.name).st_mode | stat.S_IEXEC)
    run('sh -c {}'.format(tmp.name))


DARWIN = 1
DEBIAN = 2


@functools.lru_cache(maxsize=None)
def os_type():
    os = platform.system()
    if os == 'Darwin':
        return DARWIN
    elif os == 'Linux' and any(p in platform.version() for p in {'debian', 'Ubuntu', 'SMP'}):
        return DEBIAN
    else:
        echo('⚠️  OS {} is not supported!'.format(os), ok=False)
        sys.exit(2)


def ask_yes_or_no(query, default=False):
    answer = {'yes': True, 'y': True, 'no': False, 'n': False}
    if default is None:
        prompt = " [y/n]"
    elif default:
        prompt = " [Y/n]"
    elif not default:
        prompt = " [y/N]"

    query += prompt

    while True:
        sys.stdout.write(query)
        choice = input().lower()
        if default is not None and not choice:
            return default
        elif choice in answer:
            return answer[choice]
        else:
            sys.stdout.write("Please answer with 'yes' or 'no' (or 'y' or 'n' for short).\n")


def available(packages):
    if isinstance(packages, str):
        return shutil.which(packages, path=env['PATH'])
    assert isinstance(packages, list)
    return all(shutil.which(package, path=env['PATH']) for package in packages)


################################################################################
# Data
################################################################################


tux_ascii = '''
                 .88888888:.
                88888888.88888.
              .8888888888888888.
              888888888888888888
              88' _`88'_  `88888
              88 88 88 88  88888
              88_88_::_88_:88888
              88:::,::,:::::8888
              88`:::::::::'`8888
             .88  `::::'    8:88.
            8888            `8:888.
          .8888'             `888888.
         .8888:..  .::.  ...:'8888888:.
        .8888.'     :'     `'::`88:88888
       .8888        '         `.888:8888.
      888:8         .           888:88888
    .888:88        .:           888:88888:
    8888888.       ::           88:888888
    `.::.888.      ::          .88888888
   .::::::.888.    ::         :::`8888'.:.
  ::::::::::.888   '         .::::::::::::
  ::::::::::::.8    '      .:8::::::::::::.
 .::::::::::::::.        .:888:::::::::::::
 :::::::::::::::88:.__..:88888:::::::::::'
  `'.:::::::::::88888888888.88:::::::::'
        `':::_:' -- '' -'-' `':_::::'`
'''

apple_ascii = '''
                        .8
                      .888
                    .8888'
                   .8888'
                   888'
                   8'
      .88888888888. .88888888888.
   .8888888888888888888888888888888.
 .8888888888888888888888888888888888.
.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
`%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
 `00000000000000000000000000000000000'
  `000000000000000000000000000000000'
   `0000000000000000000000000000000'
     `###########################'
       `#######################'
         `#########''########'
           `""""""'  `"""""'
'''

toplevel = argparse.ArgumentParser()
toplevel.add_argument('--force', action='store_true', help='force install')
toplevel.add_argument('--skip-base', action='store_true', help='skip base package update')

subcommands = toplevel.add_subparsers(dest='invoked_command')

cmd_all = subcommands.add_parser('all', help='install all (default)')
cmd_config = subcommands.add_parser('config', help='install config (as symlink)')
cmd_emacs = subcommands.add_parser('emacs', help='install emacs settings')
cmd_ocaml = subcommands.add_parser('ocaml', help='install OCaml')
cmd_package = subcommands.add_parser('package', help='install packages')
cmd_cargo = subcommands.add_parser('cargo', help='install cargo packages')
cmd_fonts = subcommands.add_parser('fonts', help='install fonts')
cmd_test = subcommands.add_parser('test', help='test installation')


# constant variables
args = toplevel.parse_args()
uid = os.geteuid()  # 0 if root
gsudo = (os_type() != DARWIN) and (uid != 0)
here = abspath(dirname(__file__))
env = dict(os.environ)
errors = []
jobs = multiprocessing.cpu_count() - 1


class Installer:
    def __init__(self, manager, packages, yes=False, sudo=False):
        if not available(manager):
            echo('⚠️  No such executable: {}'.format(manager), ok=False)
            raise FileNotFoundError(manager)

        self.cmd = ['sudo'] if sudo else []
        self.cmd += [manager, 'install']
        self.cmd += ['--yes'] if yes else []
        self.cmd += packages
        self.message = "⏳  [{}] install {} packages ...".format(manager, len(packages))

    def install(self):
        echo(self.message)
        run(self.cmd, shell=False)
        echo("⌛ Done!")


apt_packages = ['m4', 'silversearcher-ag', 'tmux', 'tree', 'htop', 'openssh-server',
                'graphviz', 'rsync', 'build-essential', 'tar', 'bzip2', 'gzip', 'zip',
                'autoconf', 'make', 'etckeeper', 'moreutils', 'libmysqlclient-dev',
                'bubblewrap', 'curl', 'wget',
                'ripgrep', 'fd-find', 'iotop', 'atop']
native_emacs_deps = ['build-essential', 'autoconf', 'texinfo', 'zlib1g-dev',
                     'libgnutls28-dev', 'pkg-config', 'libncurses-dev', 'wget',
                     'libgccjit-9-dev']
brew_packages = ['m4', 'tmux', 'bzip2', 'gzip', 'the_silver_searcher', 'htop', 'tree',
                 'git', 'gpatch', 'fontconfig', 'wget',
                 'ripgrep', 'coreutils', 'fd', 'iotop', 'atop',
                 'rbenv', 'ruby-build']
opam_packages = ['ocamlformat', 'ocp-indent', 'dune', 'base', 'core', 'utop']
cargo_packages = ['dutree', 'loc', 'bb', 'bat', 'exa', 'eva', 'hyperfine']


################################################################################
# Steps
################################################################################


def base():
    """
    Base configuration. This just install brew for macOS
    """
    os.makedirs(expanduser('~/.config'), exist_ok=True)
    if os_type() == DARWIN:
        echo('🍎  Setup for macOS ...')
        echo(apple_ascii, no_color=True)
        echo('')
        if available('brew'):
            echo('Found brew in path ...')
            return

        # get brew first
        curl_install('https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh')
        env['PATH'] = append_path(env.get('PATH'), '/opt/homebrew/bin')
        run('brew update')
        run('brew install gpatch git')
        run('xcode-select --install')
    elif os_type() == DEBIAN:
        echo('🐧  Setup for Linux ...')
        echo(tux_ascii, no_color=True)
        echo('')
        run('{}apt update --yes'.format('sudo ' if gsudo else ''))


def install_config():
    """
    Link .*rc files,
    global keyboard speed setting in case of Linux,
    setup fzf.
    NOTE: zsh is not installed through this step. You MUST install zsh and change zsh as default shell by yourself. This is because of WSL 2 issue.
    """
    def link(src, dst):
        src = join(here, src)
        dst = expanduser(dst)
        if exists(dst):
            echo('Already exist: {} -> {}'.format(src, dst))
            return
        os.symlink(src, dst)
        echo('✔ Create symbolic link: {} -> {}'.format(src, dst))

    link_info = {
        'nvim': '~/.config/nvim',
        'tmux/conf': '~/.tmux.conf',
        'git/config': '~/.gitconfig',
        'zsh': '~/.zsh',
        'zsh/rc.zsh': '~/.zshrc',
    }
    for src, dst in link_info.items():
        link(src, dst)

    if os_type() == DEBIAN and available('gsettings'):
        echo("⏳  Update peripherals values ...")
        run("gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 30", shell=True)
        run("gsettings set org.gnome.desktop.peripherals.keyboard delay 210", shell=True)

    authinfo_path = expanduser('~/.authinfo')
    if exists(authinfo_path):
        echo("You already have authinfo file. Please check it.")
    else:
        echo("⏳ Copying .authinfo for magit-forge.")
        run("cp {} {}".format(join(here, 'emacs', '.authinfo.template'), authinfo_path))
        echo("⏳ Done! You need to setup TOKEN variable properly!")


def install_package():
    """
    Install proper packages
    """
    # setup tzdata auxiliaries
    if not exists("/usr/share/zoneinfo/Asia/Seoul") and not exists("/etc/localtime"):
        # from https://stackoverflow.com/a/44333806
        run("ln -fs /usr/share/zoneinfo/Asia/Seoul /etc/localtime")

    if os_type() == DARWIN:
        Installer('brew', brew_packages).install()
    elif os_type() == DEBIAN:
        Installer('apt', apt_packages, yes=True, sudo=gsudo).install()

    fzfdir = expanduser('~/.fzf')
    if exists(fzfdir):
        echo("You already have installed fzf!")
    else:
        echo("⏳  Install fzf ...")
        run("git clone https://github.com/junegunn/fzf {}".format(fzfdir))
        run("{}/install".format(fzfdir))
        echo("⌛  Done!")

    z_path = expanduser('~/.config/z')
    if exists(z_path):
        echo("You alreayd have installed z!")
    else:
        echo("⏳  Install z ...")
        run("git clone --recursive https://github.com/rupa/z.git {}".format(z_path))
        echo("⌛  Done!")

    git_fuzzy_path = expanduser('~/.git-fuzzy')
    if exists(git_fuzzy_path):
        echo("You already have installed git-fuzzy!")
    else:
        echo("⏳  Install git-fuzzy ...")
        run("git clone https://github.com/bigH/git-fuzzy.git {}".format(git_fuzzy_path))
        echo("⌛  Done!")

    # FIXME: nvm install is not working
    # curl_install('https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh')

    rtags_path = expanduser('~/.dotfiles/rtags')
    if exists(rtags_path):
        echo("You already have installed rtags!")
    else:
        echo("⏳  Install rtags ...")
        run("git clone --recursive https://github.com/Andersbakken/rtags.git {}".format(rtags_path))
        os.chdir(rtags_path)
        run("cmake .")
        run("make -j{}".format(jobs))
        echo("⌛  Done!")


def install_ocaml():
    """
    Install ocaml & packages
    """
    if os_type() == DEBIAN and not available('bwrap'):
        Installer('apt', ['bubblewrap'], yes=True, sudo=gsudo).install()

    if available('opam'):
        echo('Opam already installed')
    else:
        echo('⏳  Install Opam ...')
        curl_install("https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh")
        run("opam init")
        run("eval $(opam env)")
        run("opam update")
        run("opam switch create kernel ocaml-base-compiler.4.13.1")
        run("eval $(opam env --switch=kernel)")
        echo("⌛  Done!")

    Installer('opam', opam_packages, yes=True).install()


def install_cargo():
    """
    Install cargo & packages
    """
    if available('cargo'):
        echo("Cargo already installed")
    else:
        echo('⏳  Install Cargo ...')
        curl_install('https://sh.rustup.rs')
        echo("⌛  Done!")

    if os_type() == DARWIN:
        # cannot install some packages due to nightly feature
        cargo_packages.remove('bb')
        cargo_packages.remove('bat')
        cargo_packages.remove('hyperfine')

    cargobin = expanduser('~/.cargo/bin')
    env['PATH'] = append_path(env.get('PATH'), cargobin)
    Installer('cargo', cargo_packages).install()


def install_fonts():
    """
    Install fonts: D2Coding, powerline
    wget https://github.com/naver/d2codingfont/releases/download/VER1.3.2/D2Coding-Ver1.3.2-20180524.zip
    git clone https://github.com/powerline/fonts.git to tmp
    pushd tmp & ./install.sh & popd
    fc-cache -f -v
    """
    binaries = ['wget', 'zip', 'fc-cache']
    dependencies = ['wget', 'zip', 'fontconfig']
    if not available(binaries):
        if not args.force and not ask_yes_or_no("Could not find the required dependencies in $PATH. Could you let me install the package?", default=True):
            echo("Aborted by user", ok=False)
            raise FileNotFoundError("Package wget is not available.")
        if os_type() == DARWIN:
            Installer('brew', dependencies).install()
        elif os_type() == DEBIAN:
            Installer('apt', dependencies, yes=True, sudo=gsudo).install()

    def download():
        echo("⬇ Download fonts ...")
        with tempfile.TemporaryDirectory() as tmpdir:
            # D2Coding
            run("wget -P {} https://github.com/naver/d2codingfont/releases/download/VER1.3.2/D2Coding-Ver1.3.2-20180524.zip".format(tmpdir))
            run("unzip {}/D2Coding-Ver1.3.2-20180524.zip -d {}".format(tmpdir, tmpdir))
            run("mv {}/D2Coding/*.ttf {}".format(tmpdir, fontsdir))

            # Powerline
            run("git clone https://github.com/powerline/fonts.git {}/powerline".format(tmpdir))
            run("{}/powerline/install.sh".format(tmpdir))

    fontsdir = expanduser('~/.local/share/fonts')
    os.makedirs(fontsdir, exist_ok=True)

    if not exists(join(fontsdir, 'D2Coding-Ver1.3.2-20180524.ttf')) or not exists(join(fontsdir, 'Ubuntu Mono derivative Powerline.ttf')):
        download()

    run("fc-cache -f -v")


def _build_emacs():
    """
    NOTE: This function MUST be called by install_emacs with DEBIAN
    """
    echo("⏳  Start to build emacs ...")
    Installer('apt', native_emacs_deps, yes=True, sudo=gsudo).install()
    pushd = os.getcwd()
    with tempfile.TemporaryDirectory() as tmpdir:
        run("git clone https://github.com/emacs-mirror/emacs {}".format(tmpdir))
        os.chdir(tmpdir)
        run("git checkout emacs-28.1")
        run("./autogen.sh")
        run("./configure --with-native-compilation")
        run("make -j {}".format(jobs))
        if gsudo:
            run("sudo make install")
        else:
            run("make install")

    os.chdir(pushd)
    echo ("⌛  Done! Now you have your own emacs!")


def install_emacs():
    """
    Install emacs & dotemacs
    - Linux: build from source --with-native-compilation
    - Darwin: brew tap d12prosted/emacs-plus && brew install emacs-plus@28 --with-native-comp
    If opam is installed, try install merlin & tuareg opam packages.
    """
    if available('emacs'):
        echo('Emacs already installed')
        return

    if os_type() == DARWIN:
        run("brew tap d12prosted/emacs-plus")
        run("brew install emacs-plus@28 --with-native-comp")
    elif os_type() == DEBIAN:
        _build_emacs()

    if available('opam'):
        Installer('opam', ['tuareg', 'merlin', '--assume-depexts'], yes=True).install()


def install_test():
    """
    Test install
    """
    curl_install('https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh')


def check_target(target):
    return args.invoked_command in {None, 'all', target}


def install(target):
    if not check_target(target):
        return

    try:
        echo('🎯  Start to install {} ...'.format(target))
        eval('install_{}'.format(target))()
        echo ('🎯  Completed to install {} !'.format(target))
    except Exception as e:
        import traceback
        _, msg, tb = sys.exc_info()
        locate = traceback.extract_tb(tb)[-1]
        desc = "at {}: {} ({})".format(locate.lineno, locate.line, msg)
        errors.append(desc)


################################################################################
# Actual process
################################################################################

if not args.force and args.invoked_command is None:
    if not ask_yes_or_no("Default install option is all. Are you sure to continue?"):
        echo('Aborted by user', ok=False)
        sys.exit(1)

if not args.skip_base:
    base()

install('test')
install('config')
install('package')
install('ocaml')
install('cargo')
install('fonts')
install('emacs')

if errors:
    echo("⚠  Got % 2d errors during installations!\nPlease check the following messages." % len(errors), ok=False, box=True)
    for err in errors:
        echo(err, ok=False)
else:
    echo("✔ Ready to go!", box=True)
